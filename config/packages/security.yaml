security:
    encoders:
        App\Entity\User:
            algorithm: bcrypt
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    
    role_hierarchy:
        ROLE_ADMIN: ROLE_USER

    providers:
        in_memory: { memory: ~ }

        # check if the entry is in the database

        in_database: 
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            anonymous: true


            provider: in_database

            # allows you to use the login path in your forms 

            form_login:
                login_path: user_login
                check_path: user_login

            # set the logout url

            logout:
                path: user_logout
                target: user

            # activate different ways to authenticate

            # http_basic: true
            # https://symfony.com/doc/current/security.html#a-configuring-how-your-users-will-authenticate

            # form_login: true
            # https://symfony.com/doc/current/security/form_login_setup.html

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    
    access_denied_url: /

    access_control:
        - { path: ^/connexion, roles : ROLE_ADMIN, allow_if: "not has_role('ROLE_USER')" }
        - { path: ^/inscription, roles : ROLE_ADMIN, allow_if: "not has_role('ROLE_USER')" }
        - { path: ^/edit/, roles : [ROLE_ADMIN, ROLE_USER] }
        - { path: ^/admin, roles : ROLE_ADMIN }
